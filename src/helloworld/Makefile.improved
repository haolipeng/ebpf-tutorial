# SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
# eBPF Best Practices Makefile

# =============================================================================
# 版本和依赖管理
# =============================================================================
CLANG_VERSION ?= 15
LLVM_VERSION ?= 15
KERNEL_VERSION ?= $(shell uname -r | cut -d. -f1-2)
MIN_KERNEL_VERSION := 4.18

# 工具链版本检查
CLANG_VERSION_CHECK := $(shell clang --version | head -n1 | grep -o '[0-9]\+\.[0-9]\+' | head -n1)
LLVM_VERSION_CHECK := $(shell llvm-strip --version | head -n1 | grep -o '[0-9]\+\.[0-9]\+' | head -n1)

# =============================================================================
# 构建配置
# =============================================================================
OUTPUT := ../.output
CLANG ?= clang
LLVM_STRIP ?= llvm-strip
LIBBPF_SRC := $(abspath ../../libbpf/src)
BPFTOOL_SRC := $(abspath ../../bpftool/src)
LIBBPF_OBJ := $(abspath $(OUTPUT)/libbpf.a)
BPFTOOL_OUTPUT ?= $(abspath $(OUTPUT)/bpftool)
BPFTOOL ?= /usr/local/sbin/bpftool

# 构建模式：debug 或 release
BUILD_MODE ?= debug
ifeq ($(BUILD_MODE),release)
    BPF_CFLAGS := -O2 -DNDEBUG
    CFLAGS := -O2 -DNDEBUG -Wall -Wextra
else
    BPF_CFLAGS := -O1 -g -DDEBUG
    CFLAGS := -g -O0 -Wall -Wextra -Werror
endif

# 架构检测
ARCH ?= $(shell uname -m | sed 's/x86_64/x86/' \
			 | sed 's/aarch64/arm64/' \
			 | sed 's/ppc64le/powerpc/' \
			 | sed 's/mips.*/mips/' \
			 | sed 's/arm.*/arm/' \
			 | sed 's/riscv64/riscv/')

VMLINUX := ../../vmlinux/$(ARCH)/vmlinux.h

# 包含路径
INCLUDES := -I$(OUTPUT) -I../../libbpf/include/uapi -I$(dir $(VMLINUX))
ALL_LDFLAGS := $(LDFLAGS) $(EXTRA_LDFLAGS)

# 应用程序列表
APPS = helloworld

# =============================================================================
# 构建输出控制
# =============================================================================
V ?= 0
CROSS_COMPILE ?=
EXTRA_CFLAGS ?=
EXTRA_LDFLAGS ?=
SHARED_LIBS ?=

ifeq ($(V),1)
	Q =
else
	Q = @
endif

define msg
	@printf '  %-8s %s%s\n' "$(1)" "$(patsubst $(abspath $(OUTPUT))/%,%,$(2))" "$(if $(3), $(3))"
endef

define allow-override
  $(if $(or $(findstring environment,$(origin $(1))),\
            $(findstring command line,$(origin $(1)))),,\
    $(eval $(1) = $(2)))
endef

$(call allow-override,CC,$(CROSS_COMPILE)cc)
$(call allow-override,LD,$(CROSS_COMPILE)ld)

# =============================================================================
# 系统依赖检查
# =============================================================================
.PHONY: check-deps
check-deps:
	@echo "检查系统依赖..."
	@command -v clang >/dev/null 2>&1 || { echo "错误: clang 未安装"; exit 1; }
	@command -v llvm-strip >/dev/null 2>&1 || { echo "错误: llvm-strip 未安装"; exit 1; }
	@command -v bpftool >/dev/null 2>&1 || { echo "错误: bpftool 未安装"; exit 1; }
	@echo "依赖检查通过"

# 内核版本检查
.PHONY: check-kernel
check-kernel:
	@echo "检查内核版本..."
	@current_version=$$(echo "$(KERNEL_VERSION)" | cut -d. -f1); \
	min_version=$$(echo "$(MIN_KERNEL_VERSION)" | cut -d. -f1); \
	if [ "$$current_version" -lt "$$min_version" ]; then \
		echo "警告: 内核版本 $(KERNEL_VERSION) 可能不支持所有 eBPF 功能，建议使用 $(MIN_KERNEL_VERSION) 或更高版本"; \
	fi

# =============================================================================
# 主要目标
# =============================================================================
.PHONY: all
all: check-deps check-kernel $(APPS)

.PHONY: clean
clean:
	$(call msg,CLEAN)
	$(Q)rm -rf $(OUTPUT) $(APPS)

.PHONY: distclean
distclean: clean
	$(call msg,DISTCLEAN)
	$(Q)rm -rf .output

# =============================================================================
# 目录创建
# =============================================================================
$(OUTPUT) $(OUTPUT)/libbpf $(BPFTOOL_OUTPUT):
	$(call msg,MKDIR,$@)
	$(Q)mkdir -p $@

# =============================================================================
# libbpf 构建
# =============================================================================
$(LIBBPF_OBJ): $(wildcard $(LIBBPF_SRC)/*.[ch] $(LIBBPF_SRC)/Makefile) | $(OUTPUT)/libbpf
	$(call msg,LIB,$@)
	$(Q)$(MAKE) -C $(LIBBPF_SRC) BUILD_STATIC_ONLY=1		      \
		    OBJDIR=$(dir $@)/libbpf DESTDIR=$(dir $@)		      \
		    INCLUDEDIR= LIBDIR= UAPIDIR=			      \
		    install

# =============================================================================
# bpftool 构建
# =============================================================================
$(BPFTOOL):
	@echo "使用系统 bpftool: $(BPFTOOL)"

# =============================================================================
# Clang 系统包含路径
# =============================================================================
CLANG_BPF_SYS_INCLUDES = $(shell $(CLANG) -v -E - </dev/null 2>&1 \
	| sed -n '/<...> search starts here:/,/End of search list./{ s| \(/.*\)|-idirafter \1|p }')

# =============================================================================
# BPF 程序编译
# =============================================================================
$(OUTPUT)/%.bpf.o: %.bpf.c $(LIBBPF_OBJ) $(wildcard %.h) $(VMLINUX) | $(OUTPUT)
	$(call msg,BPF,$@)
	$(Q)$(CLANG) -g $(BPF_CFLAGS) -target bpf \
		-D__TARGET_ARCH_$(ARCH) \
		-D__BPF_TRACING__ \
		$(INCLUDES) $(CLANG_BPF_SYS_INCLUDES) \
		-c $(filter %.c,$^) -o $@
	$(Q)$(LLVM_STRIP) -g $@ # 移除无用的 DWARF 信息

# =============================================================================
# BPF 骨架生成
# =============================================================================
$(OUTPUT)/%.skel.h: $(OUTPUT)/%.bpf.o | $(OUTPUT) $(BPFTOOL)
	$(call msg,GEN-SKEL,$@)
	$(Q)$(BPFTOOL) gen skeleton $< > $@

# =============================================================================
# 用户空间代码编译
# =============================================================================
$(patsubst %,$(OUTPUT)/%.o,$(APPS)): %.o: %.skel.h

$(OUTPUT)/%.o: %.c $(wildcard %.h) | $(OUTPUT)
	$(call msg,CC,$@)
	$(Q)$(CC) $(CFLAGS) $(INCLUDES) -c $(filter %.c,$^) -o $@

# =============================================================================
# 应用程序构建
# =============================================================================
$(APPS): %: $(OUTPUT)/%.o $(LIBBPF_OBJ) | $(OUTPUT)
	$(call msg,BINARY,$@)
	$(Q)$(CC) $(CFLAGS) $^ $(ALL_LDFLAGS) -lelf -lz -o $@

# =============================================================================
# 测试目标
# =============================================================================
.PHONY: test
test: $(APPS)
	@echo "运行 eBPF 程序测试..."
	@for app in $(APPS); do \
		echo "测试 $$app..."; \
		timeout 5s ./$$app || echo "$$app 测试完成"; \
	done

# =============================================================================
# 代码质量检查
# =============================================================================
.PHONY: check
check: check-deps
	@echo "运行代码质量检查..."
	@command -v clang-format >/dev/null 2>&1 && \
		clang-format --dry-run --Werror *.c *.h 2>/dev/null || \
		echo "警告: clang-format 未安装，跳过格式检查"
	@command -v clang-tidy >/dev/null 2>&1 && \
		clang-tidy *.c -- $(INCLUDES) 2>/dev/null || \
		echo "警告: clang-tidy 未安装，跳过静态分析"

# =============================================================================
# 安装和卸载
# =============================================================================
.PHONY: install
install: $(APPS)
	@echo "安装 eBPF 程序到 /usr/local/bin..."
	$(Q)install -m 755 $(APPS) /usr/local/bin/

.PHONY: uninstall
uninstall:
	@echo "从 /usr/local/bin 卸载 eBPF 程序..."
	$(Q)for app in $(APPS); do rm -f /usr/local/bin/$$app; done

# =============================================================================
# 调试和开发工具
# =============================================================================
.PHONY: debug
debug: BUILD_MODE=debug
debug: clean all

.PHONY: release
release: BUILD_MODE=release
release: clean all

.PHONY: run
run: $(APPS)
	@echo "运行 eBPF 程序..."
	@sudo ./$(word 1,$(APPS))

# =============================================================================
# 帮助信息
# =============================================================================
.PHONY: help
help:
	@echo "eBPF 项目构建系统"
	@echo ""
	@echo "目标:"
	@echo "  all          - 构建所有程序 (默认)"
	@echo "  clean        - 清理构建文件"
	@echo "  distclean    - 完全清理"
	@echo "  check-deps   - 检查系统依赖"
	@echo "  check-kernel - 检查内核版本"
	@echo "  test         - 运行测试"
	@echo "  check        - 代码质量检查"
	@echo "  install      - 安装程序"
	@echo "  uninstall    - 卸载程序"
	@echo "  debug        - 调试模式构建"
	@echo "  release      - 发布模式构建"
	@echo "  run          - 运行程序"
	@echo "  help         - 显示此帮助"
	@echo ""
	@echo "变量:"
	@echo "  BUILD_MODE   - 构建模式 (debug/release, 默认: debug)"
	@echo "  V            - 详细输出 (V=1)"
	@echo "  CC           - C 编译器"
	@echo "  CLANG        - Clang 编译器"

# =============================================================================
# 错误处理
# =============================================================================
.DELETE_ON_ERROR:
.SECONDARY:

# 确保在错误时停止
MAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += --no-builtin-rules
MAKEFLAGS += --no-print-directory
