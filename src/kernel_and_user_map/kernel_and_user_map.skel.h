/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __KERNEL_AND_USER_MAP_BPF_SKEL_H__
#define __KERNEL_AND_USER_MAP_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct kernel_and_user_map_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *process_map;
	} maps;
	struct {
		struct bpf_program *trace_execve;
	} progs;
	struct {
		struct bpf_link *trace_execve;
	} links;

#ifdef __cplusplus
	static inline struct kernel_and_user_map_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct kernel_and_user_map_bpf *open_and_load();
	static inline int load(struct kernel_and_user_map_bpf *skel);
	static inline int attach(struct kernel_and_user_map_bpf *skel);
	static inline void detach(struct kernel_and_user_map_bpf *skel);
	static inline void destroy(struct kernel_and_user_map_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
kernel_and_user_map_bpf__destroy(struct kernel_and_user_map_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
kernel_and_user_map_bpf__create_skeleton(struct kernel_and_user_map_bpf *obj);

static inline struct kernel_and_user_map_bpf *
kernel_and_user_map_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct kernel_and_user_map_bpf *obj;
	int err;

	obj = (struct kernel_and_user_map_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = kernel_and_user_map_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	kernel_and_user_map_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct kernel_and_user_map_bpf *
kernel_and_user_map_bpf__open(void)
{
	return kernel_and_user_map_bpf__open_opts(NULL);
}

static inline int
kernel_and_user_map_bpf__load(struct kernel_and_user_map_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct kernel_and_user_map_bpf *
kernel_and_user_map_bpf__open_and_load(void)
{
	struct kernel_and_user_map_bpf *obj;
	int err;

	obj = kernel_and_user_map_bpf__open();
	if (!obj)
		return NULL;
	err = kernel_and_user_map_bpf__load(obj);
	if (err) {
		kernel_and_user_map_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
kernel_and_user_map_bpf__attach(struct kernel_and_user_map_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
kernel_and_user_map_bpf__detach(struct kernel_and_user_map_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *kernel_and_user_map_bpf__elf_bytes(size_t *sz);

static inline int
kernel_and_user_map_bpf__create_skeleton(struct kernel_and_user_map_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "kernel_and_user_map_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "process_map";
	s->maps[0].map = &obj->maps.process_map;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "trace_execve";
	s->progs[0].prog = &obj->progs.trace_execve;
	s->progs[0].link = &obj->links.trace_execve;

	s->data = (void *)kernel_and_user_map_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *kernel_and_user_map_bpf__elf_bytes(size_t *sz)
{
	*sz = 6696;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x68\x13\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x1b\0\
\x01\0\x85\0\0\0\x0e\0\0\0\xbf\x06\0\0\0\0\0\0\x77\x06\0\0\x20\0\0\0\x63\x6a\
\xfc\xff\0\0\0\0\xb7\x01\0\0\0\0\0\0\x63\x1a\xf8\xff\0\0\0\0\x7b\x1a\xf0\xff\0\
\0\0\0\x7b\x1a\xe8\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xec\xff\xff\xff\
\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\0\x63\x6a\xe8\xff\0\0\0\0\xbf\xa2\0\0\
\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xe8\xff\
\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x02\
\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x47\x50\x4c\0\x19\0\0\0\x05\0\x08\0\x01\0\0\0\x04\
\0\0\0\x04\x18\x68\x01\x56\x04\x68\xb8\x01\x02\x7a\x14\0\x01\x11\x01\x25\x25\
\x13\x05\x03\x25\x72\x17\x10\x17\x1b\x25\x11\x1b\x12\x06\x73\x17\x8c\x01\x17\0\
\0\x02\x34\0\x03\x25\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\x02\x18\0\0\x03\x01\x01\
\x49\x13\0\0\x04\x21\0\x49\x13\x37\x0b\0\0\x05\x24\0\x03\x25\x3e\x0b\x0b\x0b\0\
\0\x06\x24\0\x03\x25\x0b\x0b\x3e\x0b\0\0\x07\x13\x01\x0b\x0b\x3a\x0b\x3b\x0b\0\
\0\x08\x0d\0\x03\x25\x49\x13\x3a\x0b\x3b\x0b\x38\x0b\0\0\x09\x0f\0\x49\x13\0\0\
\x0a\x21\0\x49\x13\x37\x05\0\0\x0b\x16\0\x49\x13\x03\x25\x3a\x0b\x3b\x0b\0\0\
\x0c\x13\x01\x03\x25\x0b\x0b\x3a\x0b\x3b\x0b\0\0\x0d\x34\0\x03\x25\x49\x13\x3a\
\x0b\x3b\x05\0\0\x0e\x15\0\x49\x13\x27\x19\0\0\x0f\x15\x01\x49\x13\x27\x19\0\0\
\x10\x05\0\x49\x13\0\0\x11\x0f\0\0\0\x12\x34\0\x03\x25\x49\x13\x3a\x0b\x3b\x0b\
\0\0\x13\x26\0\0\0\x14\x04\x01\x49\x13\x0b\x0b\x3a\x0b\x3b\x05\0\0\x15\x28\0\
\x03\x25\x1c\x0f\0\0\x16\x2e\x01\x11\x1b\x12\x06\x40\x18\x7a\x19\x03\x25\x3a\
\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x17\x05\0\x03\x25\x3a\x0b\x3b\x0b\x49\
\x13\0\0\x18\x34\0\x02\x18\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\x19\x34\0\x02\
\x22\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\x1a\x13\0\x03\x25\x3c\x19\0\0\0\x90\
\x01\0\0\x05\0\x01\x08\0\0\0\0\x01\0\x0c\0\x01\x08\0\0\0\0\0\0\0\x02\x02\xb8\0\
\0\0\x08\0\0\0\x0c\0\0\0\x02\x03\x32\0\0\0\0\x25\x02\xa1\0\x03\x3e\0\0\0\x04\
\x42\0\0\0\x04\0\x05\x04\x06\x01\x06\x05\x08\x07\x02\x06\x51\0\0\0\0\x12\x02\
\xa1\x01\x07\x20\0\x0d\x08\x07\x7a\0\0\0\0\x0e\0\x08\x09\x8f\0\0\0\0\x0f\x08\
\x08\x0a\xa1\0\0\0\0\x10\x10\x08\x0d\xb2\0\0\0\0\x11\x18\0\x09\x7f\0\0\0\x03\
\x8b\0\0\0\x04\x42\0\0\0\x01\0\x05\x08\x05\x04\x09\x94\0\0\0\x03\x8b\0\0\0\x0a\
\x42\0\0\0\0\x04\0\x09\xa6\0\0\0\x0b\xae\0\0\0\x0c\x01\x1b\x05\x0b\x07\x04\x09\
\xb7\0\0\0\x0c\x10\x14\0\x07\x08\x0e\xa6\0\0\0\0\x08\0\x08\x0f\xcf\0\0\0\0\x09\
\x04\0\x03\x3e\0\0\0\x04\x42\0\0\0\x10\0\x0d\x11\xe4\0\0\0\x02\x70\x01\x09\xe9\
\0\0\0\x0e\xee\0\0\0\x0b\xf6\0\0\0\x13\x01\x1f\x05\x12\x07\x08\x0d\x14\x03\x01\
\0\0\x02\x8a\x01\x09\x08\x01\0\0\x0f\x18\x01\0\0\x10\x1c\x01\0\0\x10\xa6\0\0\0\
\0\x05\x15\x05\x08\x11\x12\x16\x25\x01\0\0\x02\x4e\x09\x2a\x01\0\0\x0f\x18\x01\
\0\0\x10\x1c\x01\0\0\x10\x44\x01\0\0\x10\x44\x01\0\0\x10\xee\0\0\0\0\x09\x49\
\x01\0\0\x13\x14\xae\0\0\0\x04\x03\xc8\x04\x15\x17\0\x15\x18\x01\x15\x19\x02\
\x15\x1a\x04\0\x16\x02\xb8\0\0\0\x01\x5a\x1b\0\x16\x8b\0\0\0\x17\x1d\0\x16\x8c\
\x01\0\0\x18\x02\x91\0\x1c\0\x19\xb7\0\0\0\x19\0\x0e\0\x18\xa6\0\0\0\0\x09\x91\
\x01\0\0\x1a\x1e\0\x80\0\0\0\x05\0\0\0\0\0\0\0\x27\0\0\0\x41\0\0\0\x78\0\0\0\
\x80\0\0\0\x85\0\0\0\x99\0\0\0\xa5\0\0\0\xaa\0\0\0\xae\0\0\0\xba\0\0\0\xbe\0\0\
\0\xcb\0\0\0\xd1\0\0\0\xd7\0\0\0\xdb\0\0\0\xe0\0\0\0\xed\0\0\0\x06\x01\0\0\x19\
\x01\0\0\x1f\x01\0\0\x34\x01\0\0\x39\x01\0\0\x4d\x01\0\0\x55\x01\0\0\x61\x01\0\
\0\x6b\x01\0\0\x76\x01\0\0\x83\x01\0\0\x88\x01\0\0\x8c\x01\0\0\x55\x62\x75\x6e\
\x74\x75\x20\x63\x6c\x61\x6e\x67\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x31\x34\
\x2e\x30\x2e\x30\x2d\x31\x75\x62\x75\x6e\x74\x75\x31\x2e\x31\0\x6b\x65\x72\x6e\
\x65\x6c\x5f\x61\x6e\x64\x5f\x75\x73\x65\x72\x5f\x6d\x61\x70\x2e\x62\x70\x66\
\x2e\x63\0\x2f\x68\x6f\x6d\x65\x2f\x77\x6f\x72\x6b\x2f\x6c\x69\x62\x62\x70\x66\
\x2d\x65\x62\x70\x66\x2d\x62\x65\x67\x69\x6e\x65\x72\x2f\x73\x72\x63\x2f\x6b\
\x65\x72\x6e\x65\x6c\x5f\x61\x6e\x64\x5f\x75\x73\x65\x72\x5f\x6d\x61\x70\0\x4c\
\x49\x43\x45\x4e\x53\x45\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\
\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x70\x72\x6f\x63\x65\x73\x73\x5f\
\x6d\x61\x70\0\x74\x79\x70\x65\0\x69\x6e\x74\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\
\x69\x65\x73\0\x6b\x65\x79\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\
\x5f\x5f\x75\x33\x32\0\x76\x61\x6c\x75\x65\0\x70\x69\x64\0\x63\x6f\x6d\x6d\0\
\x70\x72\x6f\x63\x65\x73\x73\x5f\x69\x6e\x66\x6f\0\x62\x70\x66\x5f\x67\x65\x74\
\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\0\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x5f\x5f\x75\
\x36\x34\0\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x63\
\x6f\x6d\x6d\0\x6c\x6f\x6e\x67\0\x62\x70\x66\x5f\x6d\x61\x70\x5f\x75\x70\x64\
\x61\x74\x65\x5f\x65\x6c\x65\x6d\0\x42\x50\x46\x5f\x41\x4e\x59\0\x42\x50\x46\
\x5f\x4e\x4f\x45\x58\x49\x53\x54\0\x42\x50\x46\x5f\x45\x58\x49\x53\x54\0\x42\
\x50\x46\x5f\x46\x5f\x4c\x4f\x43\x4b\0\x74\x72\x61\x63\x65\x5f\x65\x78\x65\x63\
\x76\x65\0\x69\x6e\x66\x6f\0\x63\x74\x78\0\x74\x72\x61\x63\x65\x5f\x65\x76\x65\
\x6e\x74\x5f\x72\x61\x77\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x1c\0\0\0\
\x05\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\
\0\x18\0\0\0\0\0\0\0\xc4\x01\0\0\xc4\x01\0\0\x11\x02\0\0\0\0\0\0\0\0\0\x02\x03\
\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\
\0\0\0\x04\0\0\0\x01\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\
\0\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\x04\0\0\0\0\0\
\0\0\0\0\x02\x08\0\0\0\x19\0\0\0\0\0\0\x08\x09\0\0\0\x1f\0\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x0b\0\0\0\x2c\0\0\0\x02\0\0\x04\x14\0\0\0\x39\
\0\0\0\x08\0\0\0\0\0\0\0\x3d\0\0\0\x0d\0\0\0\x20\0\0\0\x42\0\0\0\0\0\0\x01\x01\
\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x0c\0\0\0\x04\0\0\0\x10\0\0\0\0\0\
\0\0\x04\0\0\x04\x20\0\0\0\x47\0\0\0\x01\0\0\0\0\0\0\0\x4c\0\0\0\x05\0\0\0\x40\
\0\0\0\x58\0\0\0\x07\0\0\0\x80\0\0\0\x5c\0\0\0\x0a\0\0\0\xc0\0\0\0\x62\0\0\0\0\
\0\0\x0e\x0e\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x11\0\0\0\x6e\0\0\0\0\0\0\x07\0\
\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x88\0\0\0\x10\0\0\0\x8c\0\0\0\x01\0\0\x0c\
\x12\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0c\0\0\0\x04\0\0\0\x04\0\0\0\xfb\x01\0\0\
\0\0\0\x0e\x14\0\0\0\x01\0\0\0\x03\x02\0\0\x01\0\0\x0f\0\0\0\0\x0f\0\0\0\0\0\0\
\0\x20\0\0\0\x09\x02\0\0\x01\0\0\x0f\0\0\0\0\x15\0\0\0\0\0\0\0\x04\0\0\0\0\x69\
\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\
\x5f\x5f\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\
\x74\0\x70\x72\x6f\x63\x65\x73\x73\x5f\x69\x6e\x66\x6f\0\x70\x69\x64\0\x63\x6f\
\x6d\x6d\0\x63\x68\x61\x72\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\
\x69\x65\x73\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x70\x72\x6f\x63\x65\x73\x73\
\x5f\x6d\x61\x70\0\x74\x72\x61\x63\x65\x5f\x65\x76\x65\x6e\x74\x5f\x72\x61\x77\
\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x63\x74\x78\0\x74\x72\x61\x63\x65\
\x5f\x65\x78\x65\x63\x76\x65\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\
\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\
\x78\x65\x63\x76\x65\0\x2f\x68\x6f\x6d\x65\x2f\x77\x6f\x72\x6b\x2f\x6c\x69\x62\
\x62\x70\x66\x2d\x65\x62\x70\x66\x2d\x62\x65\x67\x69\x6e\x65\x72\x2f\x73\x72\
\x63\x2f\x6b\x65\x72\x6e\x65\x6c\x5f\x61\x6e\x64\x5f\x75\x73\x65\x72\x5f\x6d\
\x61\x70\x2f\x6b\x65\x72\x6e\x65\x6c\x5f\x61\x6e\x64\x5f\x75\x73\x65\x72\x5f\
\x6d\x61\x70\x2e\x62\x70\x66\x2e\x63\0\x20\x20\x20\x20\x5f\x5f\x75\x33\x32\x20\
\x70\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\
\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x20\x3e\x3e\x20\x33\x32\
\x3b\0\x20\x20\x20\x20\x73\x74\x72\x75\x63\x74\x20\x70\x72\x6f\x63\x65\x73\x73\
\x5f\x69\x6e\x66\x6f\x20\x69\x6e\x66\x6f\x20\x3d\x20\x7b\x7d\x3b\0\x20\x20\x20\
\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x63\x6f\
\x6d\x6d\x28\x69\x6e\x66\x6f\x2e\x63\x6f\x6d\x6d\x2c\x20\x73\x69\x7a\x65\x6f\
\x66\x28\x69\x6e\x66\x6f\x2e\x63\x6f\x6d\x6d\x29\x29\x3b\0\x20\x20\x20\x20\x69\
\x6e\x66\x6f\x2e\x70\x69\x64\x20\x3d\x20\x70\x69\x64\x3b\0\x20\x20\x20\x20\x62\
\x70\x66\x5f\x6d\x61\x70\x5f\x75\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\x6d\x28\
\x26\x70\x72\x6f\x63\x65\x73\x73\x5f\x6d\x61\x70\x2c\x20\x26\x70\x69\x64\x2c\
\x20\x26\x69\x6e\x66\x6f\x2c\x20\x42\x50\x46\x5f\x41\x4e\x59\x29\x3b\0\x20\x20\
\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\x4c\x49\x43\x45\x4e\x53\x45\0\
\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\0\0\0\x9f\xeb\x01\0\x20\0\
\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\xac\0\0\0\xc0\0\0\0\0\0\0\0\x08\0\0\0\x99\0\0\
\0\x01\0\0\0\0\0\0\0\x13\0\0\0\x10\0\0\0\x99\0\0\0\x0a\0\0\0\0\0\0\0\xbe\0\0\0\
\x0f\x01\0\0\x11\x60\0\0\x10\0\0\0\xbe\0\0\0\x0f\x01\0\0\x2c\x60\0\0\x18\0\0\0\
\xbe\0\0\0\x0f\x01\0\0\x0b\x60\0\0\x28\0\0\0\xbe\0\0\0\x41\x01\0\0\x19\x64\0\0\
\x40\0\0\0\xbe\0\0\0\x64\x01\0\0\x1a\x70\0\0\x50\0\0\0\xbe\0\0\0\x64\x01\0\0\
\x05\x70\0\0\x60\0\0\0\xbe\0\0\0\x9c\x01\0\0\x0e\x74\0\0\x70\0\0\0\xbe\0\0\0\0\
\0\0\0\0\0\0\0\x88\0\0\0\xbe\0\0\0\xb0\x01\0\0\x05\x80\0\0\xa8\0\0\0\xbe\0\0\0\
\xed\x01\0\0\x05\x88\0\0\x0c\0\0\0\xff\xff\xff\xff\x04\0\x08\0\x08\x7c\x0b\0\
\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb8\0\0\0\0\0\0\0\xc4\0\0\0\x05\0\x08\0\x82\
\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\x01\x01\x01\x01\0\0\0\x01\0\0\x01\x01\x01\x1f\
\x04\0\0\0\0\x37\0\0\0\x50\0\0\0\x5f\0\0\0\x03\x01\x1f\x02\x0f\x05\x1e\x04\x7f\
\0\0\0\0\xec\xe2\x2e\x42\xcc\xbc\x50\x82\x55\x25\xa0\xe1\x5b\xe8\x39\xd9\x99\0\
\0\0\x01\xb8\x10\xf2\x70\x73\x3e\x10\x63\x19\xb6\x7e\xf5\x12\xc6\x24\x6e\xa4\0\
\0\0\x02\xb2\xcd\x23\x82\xf6\x75\x90\x99\xa0\x49\xf8\x37\x5a\xd4\x99\x87\xb6\0\
\0\0\x03\xe3\x56\xfe\x73\xb5\x69\xa5\xa8\xf8\xd7\x71\x4d\xf6\xd1\xc0\xa5\x04\0\
\0\x09\x02\0\0\0\0\0\0\0\0\x03\x16\x01\x05\x11\x0a\x13\x05\x2c\x06\x2e\x05\x0b\
\x20\x05\x19\x06\x2f\x05\x1a\x3f\x05\x05\x06\x2e\x05\x0e\x06\x2f\x06\x03\x63\
\x20\x05\x05\x06\x03\x20\x4a\x4c\x02\x02\0\x01\x01\x2f\x68\x6f\x6d\x65\x2f\x77\
\x6f\x72\x6b\x2f\x6c\x69\x62\x62\x70\x66\x2d\x65\x62\x70\x66\x2d\x62\x65\x67\
\x69\x6e\x65\x72\x2f\x73\x72\x63\x2f\x6b\x65\x72\x6e\x65\x6c\x5f\x61\x6e\x64\
\x5f\x75\x73\x65\x72\x5f\x6d\x61\x70\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\
\x64\x65\x2f\x61\x73\x6d\x2d\x67\x65\x6e\x65\x72\x69\x63\0\x2e\x2e\x2f\x2e\x6f\
\x75\x74\x70\x75\x74\x2f\x62\x70\x66\0\x2e\x2e\x2f\x2e\x2e\x2f\x6c\x69\x62\x62\
\x70\x66\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x75\x61\x70\x69\x2f\x6c\x69\x6e\
\x75\x78\0\x6b\x65\x72\x6e\x65\x6c\x5f\x61\x6e\x64\x5f\x75\x73\x65\x72\x5f\x6d\
\x61\x70\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x2d\x6c\x6c\x36\x34\x2e\x68\0\
\x62\x70\x66\x5f\x68\x65\x6c\x70\x65\x72\x5f\x64\x65\x66\x73\x2e\x68\0\x62\x70\
\x66\x2e\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\x01\
\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x03\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0b\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x03\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x14\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x03\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcd\0\0\0\x12\0\x03\0\0\0\0\
\0\0\0\0\0\xb8\0\0\0\0\0\0\0\x7a\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\
\0\0\0\x36\x01\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x88\0\0\0\0\0\
\0\0\x01\0\0\0\x0c\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x04\0\0\0\x11\0\0\0\0\0\0\
\0\x03\0\0\0\x05\0\0\0\x15\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x1f\0\0\0\0\0\0\0\
\x03\0\0\0\x07\0\0\0\x23\0\0\0\0\0\0\0\x03\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x0c\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x10\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x18\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x1c\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x20\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x24\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x28\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x2c\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x30\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x34\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x38\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x3c\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x40\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x44\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x48\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x4c\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x50\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x54\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x58\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x5c\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x60\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x64\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x68\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x6c\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x70\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x74\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x78\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x7c\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x80\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x08\0\0\0\0\0\0\0\x02\0\0\0\x0d\0\0\0\x10\0\0\0\0\0\0\0\
\x02\0\0\0\x0c\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\xbc\x01\0\0\0\0\0\0\
\x04\0\0\0\x0c\0\0\0\xd4\x01\0\0\0\0\0\0\x04\0\0\0\x0d\0\0\0\x2c\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x50\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x70\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x90\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xb0\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\xc0\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xd0\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x18\0\0\0\0\0\0\0\
\x02\0\0\0\x02\0\0\0\x22\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x26\0\0\0\0\0\0\0\
\x03\0\0\0\x0a\0\0\0\x2a\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x2e\0\0\0\0\0\0\0\
\x03\0\0\0\x0a\0\0\0\x3a\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x4f\0\0\0\0\0\0\0\
\x03\0\0\0\x0a\0\0\0\x64\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x79\0\0\0\0\0\0\0\
\x03\0\0\0\x0a\0\0\0\x93\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x0b\x0c\x0d\0\x2e\
\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\x65\x78\x74\0\x2e\
\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\
\x6f\x63\x6c\x69\x73\x74\x73\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x73\
\x74\x72\x5f\x6f\x66\x66\x73\x65\x74\x73\0\x2e\x6d\x61\x70\x73\0\x2e\x64\x65\
\x62\x75\x67\x5f\x73\x74\x72\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\x5f\
\x73\x74\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x61\x64\x64\x72\0\
\x70\x72\x6f\x63\x65\x73\x73\x5f\x6d\x61\x70\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\
\x75\x67\x5f\x69\x6e\x66\x6f\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\
\x67\0\x2e\x72\x65\x6c\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\x73\
\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\x78\x65\
\x63\x76\x65\0\x74\x72\x61\x63\x65\x5f\x65\x78\x65\x63\x76\x65\0\x6c\x69\x63\
\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\
\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x66\x72\x61\x6d\x65\0\x6b\x65\
\x72\x6e\x65\x6c\x5f\x61\x6e\x64\x5f\x75\x73\x65\x72\x5f\x6d\x61\x70\x2e\x62\
\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\
\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1d\x01\0\0\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x23\x12\0\0\0\0\0\0\x3e\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xa8\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\
\0\0\0\0\0\0\0\xb8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\xa4\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x0e\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x1a\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x49\
\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\0\0\0\0\0\0\0\x20\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xda\0\0\0\x01\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x1c\x01\0\0\0\0\0\0\x1d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x39\x01\0\0\0\0\0\0\x36\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x8a\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6f\x02\0\0\
\0\0\0\0\x94\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x86\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x0e\0\0\0\0\0\0\x50\
\0\0\0\0\0\0\0\x1a\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x36\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\x04\0\0\0\0\0\0\x84\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x32\0\0\0\x09\0\0\0\x40\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x0e\0\0\0\0\0\0\xf0\x01\0\0\0\0\0\0\x1a\0\0\
\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x4f\0\0\0\x01\0\0\0\x30\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x87\x04\0\0\0\0\0\0\xa6\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x6e\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x2d\x06\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x6a\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x70\x10\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x1a\0\0\0\x0e\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x31\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\
\x06\0\0\0\0\0\0\xed\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x2d\x01\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x10\0\0\0\
\0\0\0\x20\0\0\0\0\0\0\0\x1a\0\0\0\x10\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x19\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x0a\0\0\0\0\0\0\xe0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\
\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x10\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\
\x1a\0\0\0\x12\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xf6\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x0b\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf2\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x70\x11\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x1a\0\0\0\x14\0\0\0\x08\
\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xe6\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x48\x0b\0\0\0\0\0\0\xc8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xe2\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x11\
\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x1a\0\0\0\x16\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\
\0\0\0\0\x5a\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x0c\0\0\0\0\
\0\0\xbc\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x96\
\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x20\x12\0\0\0\0\0\0\
\x03\0\0\0\0\0\0\0\x1a\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x25\x01\
\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x0c\0\0\0\0\0\0\x50\x01\0\0\
\0\0\0\0\x01\0\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct kernel_and_user_map_bpf *kernel_and_user_map_bpf::open(const struct bpf_object_open_opts *opts) { return kernel_and_user_map_bpf__open_opts(opts); }
struct kernel_and_user_map_bpf *kernel_and_user_map_bpf::open_and_load() { return kernel_and_user_map_bpf__open_and_load(); }
int kernel_and_user_map_bpf::load(struct kernel_and_user_map_bpf *skel) { return kernel_and_user_map_bpf__load(skel); }
int kernel_and_user_map_bpf::attach(struct kernel_and_user_map_bpf *skel) { return kernel_and_user_map_bpf__attach(skel); }
void kernel_and_user_map_bpf::detach(struct kernel_and_user_map_bpf *skel) { kernel_and_user_map_bpf__detach(skel); }
void kernel_and_user_map_bpf::destroy(struct kernel_and_user_map_bpf *skel) { kernel_and_user_map_bpf__destroy(skel); }
const void *kernel_and_user_map_bpf::elf_bytes(size_t *sz) { return kernel_and_user_map_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
kernel_and_user_map_bpf__assert(struct kernel_and_user_map_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __KERNEL_AND_USER_MAP_BPF_SKEL_H__ */
